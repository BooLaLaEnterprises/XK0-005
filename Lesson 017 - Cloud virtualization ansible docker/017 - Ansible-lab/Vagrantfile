##########
# The post-install script to setup the central Ansible server.
$serverscript = <<-SERVERSCRIPT
echo "192.168.210.10 ansible ansible.ansible.lab" >> /etc/hosts
echo "192.168.210.11 target1 target1.ansible.lab" >> /etc/hosts
echo "192.168.210.12 target2 target2.ansible.lab" >> /etc/hosts
echo "192.168.210.13 target3 target3.ansible.lab" >> /etc/hosts
echo "192.168.210.14 target4 target4.ansible.lab" >> /etc/hosts
echo "192.168.210.15 target5 target5.ansible.lab" >> /etc/hosts

yum install -y ansible git chrony
systemctl enable chrony
systemctl start chrony

groupadd ansible
usermod -a -G ansible vagrant
cp -r /vagrant/ansible /var/ansible
cp -r /vagrant/k8s /var/k8s

cd /var/ansible
git init

chown -R vagrant:ansible /var/ansible
dos2unix /var/ansible/*

SERVERSCRIPT


##########
# The post-install script for the Ansible target hosts.
$targetscript = <<-TARGETSCRIPT
echo "192.168.210.10 ansible ansible.ansible.lab" >> /etc/hosts
echo "192.168.210.11 target1 target1.ansible.lab" >> /etc/hosts
echo "192.168.210.12 target2 target2.ansible.lab" >> /etc/hosts
echo "192.168.210.13 target3 target3.ansible.lab" >> /etc/hosts
echo "192.168.210.14 target4 target4.ansible.lab" >> /etc/hosts
echo "192.168.210.15 target5 target5.ansible.lab" >> /etc/hosts

apk add python3 git uuidgen chrony

addgroup ansible           # Alpine does not have groupadd
addgroup vagrant ansible   # Alpine does not have usermod

cp -r /vagrant/k8s /var/k8s

echo "br_netfilter" > /etc/modules-load.d/k8s.conf
modprobe br_netfilter
echo "net.bridge.bridge-nf-call-iptables=1" >> /etc/sysctl.conf
echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
echo "net.bridge.bridge-nf-call-ip6tables = 1" >> /etc/sysctl.conf

uuidgen > /etc/machine-id

#/sbin/setup-ntp chrony

cat > /etc/apk/repositories << EOF
http://dl-cdn.alpinelinux.org/alpine/v3.15/main
http://dl-cdn.alpinelinux.org/alpine/v3.15/community
http://dl-cdn.alpinelinux.org/alpine/edge/community
http://dl-cdn.alpinelinux.org/alpine/edge/testing
EOF

TARGETSCRIPT


##########
# Defining the five Ansible target hosts.
servers = {
   "ansible.ansible.lab" => ["generic/centos7", 1, 256, 20, "192.168.210.10" ]
}

targets = {
   "target1.ansible.lab" => ["generic/alpine315", 1, 2048, 10, "192.168.210.11", 8081 ],
   "target2.ansible.lab" => ["generic/alpine315", 1, 2048, 10, "192.168.210.12", 8082 ],
   "target3.ansible.lab" => ["generic/alpine315", 1, 2048, 10, "192.168.210.13", 8083 ],
   "target4.ansible.lab" => ["generic/alpine315", 1, 256, 10, "192.168.210.14", 8084 ],
   "target5.ansible.lab" => ["generic/alpine315", 1, 256, 10, "192.168.210.15", 8085 ]
}


##########
# Starting the actual build.

Vagrant.configure("2") do |config|

  ##########
  # First, define the server that acts as central Ansible host.
  # It will send assignments to all Ansible targets.

  servers.each do | (name, cfg) |
    box, numvcpus, memory, storage, ip = cfg
    config.vm.define name do |machine|

      machine.vm.box      = box
      machine.vm.hostname = name

      machine.vm.network "private_network", ip: ip, virtualbox__intnet: "ansiblenet"  
      #machine.vm.synced_folder ".", "/vagrant", type: "smb", mount_options: ["vers=3.02","mfsymlinks"]
      machine.vm.synced_folder ".", "/vagrant", type: "virtualbox"

      if Vagrant.has_plugin?("vagrant-vbguest")
        machine.vbguest.auto_update = true
      end

      machine.vm.provider "virtualbox" do |v|
        v.memory = memory
        v.cpus = numvcpus
      end

      machine.vm.provision "setup", type: "shell", inline: $serverscript

    end # end machine config
  end # end servers.each


  ##########
  # Then we define the five Ansible target hosts.
  # These are smaller, light Alpine Linux system for demo purposes.

  targets.each do | (name, cfg) |
    box, numvcpus, memory, storage, ip, pfwd = cfg
    config.vm.define name do |machine|

      machine.vm.box      = box
      machine.vm.hostname = name

      machine.vm.network "private_network", ip: ip, virtualbox__intnet: "ansiblenet" 
      machine.vm.network "forwarded_port", guest: 80, host: pfwd 
      machine.vm.synced_folder ".", "/vagrant", type: "virtualbox"

      if Vagrant.has_plugin?("vagrant-vbguest")
        machine.vbguest.auto_update = false
      end

      machine.vm.provider "virtualbox" do |v|
        v.memory = memory
        v.cpus = numvcpus
      end

      machine.vm.provision "setup", type: "shell", inline: $targetscript

    end # end machine config
  end # end targets.each

end
